[gd_scene load_steps=11 format=2]

[ext_resource path="res://ColorRect1.gd" type="Script" id=1]
[ext_resource path="res://angles-right-solid.svg" type="Texture" id=2]
[ext_resource path="res://basic_bh_button.gd" type="Script" id=3]
[ext_resource path="res://Xolonium-Regular.ttf" type="DynamicFontData" id=4]
[ext_resource path="res://TouchScreenButton1.gd" type="Script" id=5]
[ext_resource path="res://pngwing.com.png" type="Texture" id=6]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float lr;
uniform vec3 positionVector;
uniform bool showDisk=true;

//change to 1 to increase performance
const int AA=1;
const float _Speed=3.0;  //disk rotation speed

const float _Steps=1.0; //disk textu re layers
const float _Size=0.3; //size of BH


mat4 rotationX(float angle1) {
	vec4 a=vec4(1.0,        0.0,          0.0,          0.0);
	vec4 b=vec4(0.0,  cos(angle1), -sin(angle1),        0.0);
	vec4 c =vec4(0.0,  sin(angle1),  cos(angle1),        0.0);
    vec4 d =vec4(0.0,          0.0,            0.0,        1.0);
    return mat4(a,b,c,d);
}

mat4 rotationY( in float angle1 ) {
    vec4 a=vec4(    cos(angle1),     0.0,      sin(angle1), 0.0);
    vec4 b=vec4(0.0,      1.0,             0.0, 0.0);
    vec4 c=vec4(-sin(angle1),    0.0,      cos(angle1), 0.0);
    vec4 d=vec4(0.0,      0.0,              0.0,  1.0);
	return mat4(a,b,c,d);
}

mat4 rotationZ( in float angle1 ) {
    vec4 a=vec4(cos(angle1),     -sin(angle1),    0.0,  0.0);
    vec4 b=vec4(sin(angle1),     cos(angle1),     0.0,  0.0);
    vec4 c=vec4(0.0,              0.0,      1.0,  0.0);
    vec4 d=vec4(0.0,              0.0,      0.0,  1.0);
	return mat4(a,b,c,d);
}

void Rotate( inout vec3 vector, vec2 angle1 )
{
    vector.yz = cos(angle1.y)*vector.yz
                +sin(angle1.y)*vec2(-1,1)*vector.zy;
    vector.xz = cos(angle1.x)*vector.xz
                +sin(angle1.x)*vec2(-1,1)*vector.zx;
}

float hashFloat(float x){ return fract(sin(x)*15.0); }
float hash(vec2 x){ return hashFloat(x.x + hashFloat(x.y)); }

float value(vec2 p, float f) //value noise
{
    float bl = hash(floor(p*f + vec2(0.0,0.0)));
    float br = hash(floor(p*f + vec2(1.0,0.0)));
    float tl = hash(floor(p*f + vec2(0.0,1.0)));
    float tr = hash(floor(p*f + vec2(1.0,1.0)));
    
    vec2 fr = fract(p*f);    
    fr = (3. - 2.*fr)*fr*fr;    
    float b = mix(bl, br, fr.x);    
    float t = mix(tl, tr, fr.x);
    return  mix(b,t, fr.y);
}

vec4 background(vec3 ray)
{
	//return vec4(0.5,0.5,0.5,0.5);
    vec2 uv = ray.xy;
    
    if( abs(ray.x) > 0.5)
        uv.x = ray.z;
    else if( abs(ray.y) > 0.5)
        uv.y = ray.z;

        
    float brightness = value( uv*5.1, 100.0); 
    float color = value( uv*2.0, 20.0); 
    brightness = pow(brightness, 256.0);
  
    brightness = brightness*100.0;
    brightness = clamp(brightness, 0.0, 1.0);
    
    vec3 stars = brightness * mix(vec3(1.0, 0.6, 0.2), vec3(0.2, 0.6, 1.0), color);

    return vec4(stars, 1.0);
}


vec4 raymarchDisk(vec3 ray, vec3 zeroPos,float itime)
{
	//return vec4(0.5,0.5,0.5,0.5);
    vec3 position = zeroPos;      
    float lengthPos = length(position.xz);
    float dist = min(1., lengthPos*(1.0/_Size) *0.5) * _Size * 0.04 *(1.0/_Steps) /( abs(ray.y) );

    position += dist*_Steps*ray*0.8;     

    vec2 deltaPos;
    deltaPos.x = -zeroPos.z*0.01 + zeroPos.x;
    deltaPos.y = zeroPos.x*0.01 + zeroPos.z;
    deltaPos = normalize(deltaPos - zeroPos.xz);
    
    float parallel = dot(ray.xz, deltaPos);
    parallel /= sqrt(lengthPos);
    parallel *= 0.6;
    float redShift = parallel +0.4;
    redShift *= redShift;

    redShift = clamp(redShift, 0.0, 1.0);
    
    float disMix = clamp((lengthPos - _Size * 2.0)*(1.0/_Size)*0.24, 0.0, 1.0);
    vec3 insideCol =  mix(vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0), disMix);
    
    insideCol *= mix(vec3(0.0,0.0,0.0), vec3(0.0,0.0, 0.0), redShift);
    insideCol *= 1.4;
    redShift += 0.14;
    redShift *= redShift;

    vec4 o = vec4(0.0);

    for(float i = 0.0 ; i < _Steps; i++)
    {                      
        position -= dist * ray ;  

        float intensity =clamp( 1. - abs((i - 0.8) * (1.0) * 2.0), 0.0, 1.0); 
        lengthPos = length(position.xz);
        float distMult = 1.0;

        distMult *=  clamp((lengthPos -  _Size * 0.75) * (1./_Size) * 1.5, 0.0, 1.0);        
        distMult *= clamp(( _Size * 10.0 -lengthPos) * (1./_Size) * 0.20, 0.0, 1.0);
        distMult *= distMult;

        float u = lengthPos + itime* _Size*0.3 + intensity* _Size* 0.2;

        vec2 xy ;
        float rot = mod(itime*_Speed, 8192.0);
        xy.x = -position.z*sin(rot) + position.x*cos(rot);
        xy.y = position.x*sin(rot) + position.z*cos(rot);

        float x = abs( xy.x/(xy.y));         
        float angle = 0.02*atan(x);
  
        const float f = 70.0;
        float noise = value( vec2( angle, u * (1./_Size) * 0.05), f);
        noise = noise*0.66 + 0.33*value( vec2( angle, u * (1.0/_Size) * 0.05), f*2.0);     
        
        float extraWidth =  noise * 3.0 * (1.0 -  clamp(i * (1.0)*2.0 - 1.0, 0.0, 1.0));

        float alpha = clamp(noise*(intensity + extraWidth)*( (1.0/_Size) * 10.0  + 0.01 ) *  dist * distMult , 0.0, 1.0);

        vec3 col = 2.0*mix(vec3(0.3,0.2,0.15)*insideCol, insideCol, min(1.,intensity*2.0));
        o = clamp(vec4(col*alpha + o.rgb*(1.0-alpha), o.a*(1.0-alpha) + alpha), vec4(0.0), vec4(1.));

        lengthPos *= (1.0/_Size);
   
        o.rgb+= redShift*(intensity*1.0 + 0.5)* (1.0) * 100.0*distMult/(lengthPos*lengthPos);
    }  
 
    o.rgb = clamp(o.rgb - 0.02, 0.2, 1.0);
    return o ;
}



void fragment()
{
	vec2 fragCoord = FRAGCOORD.xy;
	vec3 iResolution = vec3(1.0/SCREEN_PIXEL_SIZE,0.0);
	float iTime=TIME;
    vec2 fragCoordRot;
    fragCoordRot.x = fragCoord.x*0.985 + fragCoord.y * 0.174;
    fragCoordRot.y = fragCoord.y*0.985 - fragCoord.x * 0.174;
    fragCoordRot += vec2(-0.06, 0.12) * iResolution.xy;
    vec3 rotation=vec3(0.0,1.0,10.0);
    mat4 f=rotationX(rotation.x) * rotationY(rotation.y) * rotationZ(rotation.z);
    
    for( int j=0; j<AA; j++ )
    for( int i=0; i<AA; i++ )
    {
        //setting up camera
        vec3 ray = normalize( vec3((fragCoordRot-iResolution.xy*0.5  + vec2(float(i),float(j))/(float(AA)))/iResolution.x, 1.0 )); 
        vec3 pos = positionVector;//vec3(1.025,-.05,-8.1);
        // inside location looking outside:> vec3 pos = vec3(0.025,0.05,0.1);
        vec2 angle = vec2(lr,0);
        //angle.y = (2.*0.0/iResolution.y)*3.14 + 0.1 + 3.14;
        float dist = length(pos);
        Rotate(pos,angle*0.05);
        //angle.xy -= min(.3/dist , 3.14) * vec2(1, 0.5);
        Rotate(ray,angle);

        vec4 col = vec4(0.0); 
        vec4 glow = vec4(0.0); 
        vec4 outCol =vec4(100.0);

        for(int disks = 0; disks< 50; disks++) //steps
        {

            for (int h = 0; h < 10; h++) //reduces tests for exit conditions (to minimise branching)
            {
                float dotpos = dot(pos,pos);
                float invDist = inversesqrt(dotpos); //1/distance to BH
                float centDist = dotpos * invDist;  //distance to BH
                float stepDist = 0.92 * abs(pos.y /(ray.y));  //conservative distance to disk (y==0)   
                float farLimit = centDist * 0.5; //limit step size far from to BH
                float closeLimit = centDist*0.1 + 0.05*centDist*centDist*(1.0/_Size); //limit step size closse to BH
                stepDist = min(stepDist, min(farLimit, closeLimit));
                
                float invDistSqr = invDist * invDist;
                float forceK = 0.8; //0.625;
                float bendForce = stepDist * invDistSqr * _Size * forceK;  //bending force
                ray =  normalize(ray - (bendForce * invDist )*pos);  //bend ray towards BH
                pos += stepDist * ray; 
                //glow += vec4(1.2,1.1,1, 1.0) *(0.01*stepDist * invDistSqr * invDistSqr *clamp( centDist*(2.0) - 1.2,0.0,1.0)); //adds fairly cheap glow
            }

            float dist2 = length(pos);

            if(dist2 < _Size * 0.1) //ray sucked in to BH
            {
                outCol =  vec4(col.rgb * col.a + glow.rgb*(0.8-col.a),1.0) ;
                break;
            }

            else if(dist2 > _Size * 1000.0) //ray escaped BH
            {                   
                vec4 bg = background (ray);
                outCol = vec4(col.rgb*col.a + bg.rgb*(1.0-col.a)  + glow.rgb *(1.0-col.a), 1.0);       
                break;
            }

            else if (abs(pos.y) <= _Size * 0.002) //ray hit accretion disk
            {
                vec4 diskCol = raymarchDisk(ray, pos,iTime);   //render disk
                //vec4 diskCol = background(ray);
				pos.y = 0.0;
                pos += abs(_Size * 0.01 /ray.y) * ray;  
                col = vec4(diskCol.rgb*(1.0-col.a) + col.rgb, col.a + diskCol.a*(1.0-col.a));
            }   
        }
   
        //if the ray never escaped or got sucked in
        if(outCol.r == 100.0)
            outCol = vec4(col.rgb + glow.rgb *(col.a +  glow.a) , 1.0);

        col = outCol;
	    col.rgb =  pow( col.rgb, vec3(0.6));
        COLOR = col/float(AA*AA);
		
		
    }

	
}
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/lr = 20.0
shader_param/positionVector = Vector3( 0, 0.5, -6 )
shader_param/showDisk = true

[sub_resource type="DynamicFont" id=3]
size = 48
use_mipmaps = true
font_data = ExtResource( 4 )

[sub_resource type="DynamicFont" id=4]
size = 32
font_data = ExtResource( 4 )

[node name="Node2D" type="Spatial"]

[node name="ColorRect" type="ColorRect" parent="."]
material = SubResource( 2 )
margin_left = -5.8252
margin_top = -4.39081
margin_right = 2287.17
margin_bottom = 1087.61
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="ColorRect"]
margin_left = 62.5696
margin_top = 475.39
margin_right = 405.57
margin_bottom = 594.39
custom_fonts/font = SubResource( 3 )
custom_colors/font_color = Color( 0.988235, 0.988235, 0.988235, 1 )
text = "Black Holes
By Neoned71"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="ColorRect"]
margin_left = 50.0
margin_top = 104.543
margin_right = 335.0
margin_bottom = 663.543
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button2" type="Button" parent="ColorRect/VBoxContainer"]
visible = false
margin_right = 285.0
margin_bottom = 20.0
text = "Basic White Hole"
clip_text = true
script = ExtResource( 3 )

[node name="Button3" type="Button" parent="ColorRect/VBoxContainer"]
visible = false
margin_right = 285.0
margin_bottom = 20.0
text = "Oscillating Black/White Hole"
clip_text = true

[node name="Label" type="Label" parent="ColorRect/VBoxContainer"]
margin_right = 308.0
margin_bottom = 39.0
custom_fonts/font = SubResource( 4 )
text = "Newtonian Gravity"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label2" type="Label" parent="ColorRect/VBoxContainer"]
margin_top = 43.0
margin_right = 308.0
margin_bottom = 82.0
custom_fonts/font = SubResource( 4 )
text = "Repeating(Sine)"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label3" type="Label" parent="ColorRect/VBoxContainer"]
margin_top = 86.0
margin_right = 308.0
margin_bottom = 125.0
custom_fonts/font = SubResource( 4 )
text = "Repulsive Gravity"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TouchScreenButton" type="TouchScreenButton" parent="ColorRect/VBoxContainer"]
position = Vector2( 330.151, -1.6651 )
scale = Vector2( 0.123243, 0.0953559 )
normal = ExtResource( 2 )
action = "basic_black_hole"
script = ExtResource( 5 )

[node name="TouchScreenButton3" type="TouchScreenButton" parent="ColorRect/VBoxContainer"]
position = Vector2( 334.008, 46.9883 )
scale = Vector2( 0.117734, 0.0883337 )
normal = ExtResource( 2 )
action = "oscillating_gravity"
script = ExtResource( 5 )

[node name="TouchScreenButton4" type="TouchScreenButton" parent="ColorRect/VBoxContainer"]
position = Vector2( 334.478, 92.287 )
scale = Vector2( 0.119099, 0.0849798 )
normal = ExtResource( 2 )
action = "repulsive_gravity"
script = ExtResource( 5 )

[node name="TouchScreenButton2" type="TouchScreenButton" parent="ColorRect/VBoxContainer"]
visible = false
position = Vector2( 189.948, 290.509 )
action = "basic_white_hole"
script = ExtResource( 5 )

[node name="Label2" type="Label" parent="ColorRect/VBoxContainer/TouchScreenButton2"]
margin_left = -4.57764e-05
margin_top = 0.698517
margin_right = 150.0
margin_bottom = 20.6985
custom_fonts/font = SubResource( 4 )
text = "White Hole Simple"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="ColorRect/VBoxContainer/TouchScreenButton2"]
margin_left = 4.0
margin_top = 583.0
margin_right = 516.0
margin_bottom = 1095.0
rect_scale = Vector2( 0.08, 0.08 )
texture = ExtResource( 6 )
__meta__ = {
"_edit_use_anchors_": false
}
